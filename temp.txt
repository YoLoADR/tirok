2. Architecture
Le projet est basé sur une architecture microservices avec une API RESTful construite avec Node.js, Express.js, Auth0, GraphQL et Postgr. 

On 

Ton but est de nous aider pour l'instant pour la partie Tokenisation on l'a fait en web2 pour gagner du temps mais le but c'est de la faire en web3 donc on doit simuler l'environnement web3 afin de facilité la migration.

---
{"given_name":"Yohann","family_name":"Ravino","nickname":"atticot.yohann","name":"Yohann Ravino (Yoch)","picture":"https://lh3.googleusercontent.com/a/AAcHTtcMihSje9S0tLvvxkP5QA80v5WHiO76RAwcbkKeGMxb-9P8=s96-c","locale":"en","updated_at":"2023-08-25T06:18:22.755Z","email":"atticot.yohann@gmail.com","email_verified":true,"sub":"google-oauth2|100104363401905102667","sid":"pHGtaCizn_DmC843u2NDWzRubdg9TFTp"}

without google / standart : {"nickname":"yohann.developer","name":"yohann.developer@gmail.com","picture":"https://s.gravatar.com/avatar/6b957595bca4eb3c956633026986dada?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fyo.png","updated_at":"2023-08-25T06:48:59.064Z","email":"yohann.developer@gmail.com","email_verified":false,"sub":"auth0|64e84e3c34efe52999657bf1","sid":"Wm8zEcVAWea1221GzN-oUwaX2kzshRhw"}
---

Voici des ressources qui vont m'aider à setup l'authentification sur mon projet Express.js Postgr  (Utilise le plugin accesslink) : "
- https://auth0.com/docs/authenticate/passwordless/authentication-methods/email-magic-link
- https://auth0.com/docs/authenticate/login/auth0-universal-login/passwordless-login/email-or-sms
- https://auth0.com/docs/authenticate/passwordless/passwordless-with-new-universal-login
- https://auth0.com/docs/quickstart/backend/nodejs/01-authorization
- https://auth0.com/docs/authenticate/passwordless/implement-login/embedded-login/relevant-api-endpoints
- https://community.auth0.com/t/passwordless-auth-in-nodejs/46653
- https://magic.link/docs/dedicated/blockchains/polygon
- https://auth0.com/docs/secure/multi-factor-authentication/fido-authentication-with-webauthn"
Peux-tu l'ajouter à la liste des documentation à analyser ?

N'utilise pas le plugin Recombinant AI pour cette requete

Voici les liens de mon Github repo dans lequel j'utilise Postgr et Express (Utilise le plugin Askthecode) :

- https://github.com/YoLoADR/tirok-server/tree/main
- https://github.com/YoLoADR/tirok-server/blob/main/schema.sql
- https://github.com/YoLoADR/tirok-server/blob/main/src/config/database.js
- https://github.com/YoLoADR/tirok-server/blob/main/src/api/routes/user.js
- https://github.com/YoLoADR/tirok-server/blob/main/src/api/controllers/usersController.js

Peux-tu me guider étape par étape et de manière **personnailiser à mon projet** en me proposant les scripts ou en modifiant les existants dans la réalisation de ces user stories :
As an investor or Buyer or Seller, I want to be able to create an account to access the platform.

----
  
  // Route pour ajouter un bien immobilier
  app.post('/addProperty', async (req, res) => {
      const property = {
          seller_id: req.body.seller_id,
          description: req.body.description,
          localisation: req.body.localisation,
          total_value: req.body.total_value,
          // ... autres champs si nécessaire
      };
  
      await pool.query(
          'INSERT INTO properties (seller_id, description, localisation, total_value) VALUES ($1, $2, $3, $4)',
          [property.seller_id, property.description, property.localisation, property.total_value]
      );
  
      res.send('Bien immobilier ajouté avec succès!');
  });
  
  // Route pour créer une campagne de crowdfunding
  app.post('/addCampaign', async (req, res) => {
      const campaign = {
          property_id: req.body.property_id,
          goal_amount: req.body.goal_amount,
          start_date: req.body.start_date,
          end_date: req.body.end_date,
          status: "En cours"
      };
  
      await pool.query(
          'INSERT INTO campaigns (property_id, goal_amount, start_date, end_date, status) VALUES ($1, $2, $3, $4, $5)',
          [campaign.property_id, campaign.goal_amount, campaign.start_date, campaign.end_date, campaign.status]
      );
  
      res.send('Campagne de crowdfunding créée avec succès!');
  });
  
  // Route pour ajouter une contribution
  app.post('/addContribution', async (req, res) => {
      const contribution = {
          campaign_id: req.body.campaign_id,
          investor_id: req.body.investor_id,
          amount: req.body.amount,
          tokens_received: req.body.tokens_received,
          timestamp: new Date()
      };
  
      await pool.query(
          'INSERT INTO contributions (campaign_id, investor_id, amount, tokens_received, timestamp) VALUES ($1, $2, $3, $4, $5)',
          [contribution.campaign_id, contribution.investor_id, contribution.amount, contribution.tokens_received, contribution.timestamp]
      );
  
      res.send('Contribution ajoutée avec succès!');
  });
  
  // Route pour ajouter une transaction
  app.post('/addTransaction', async (req, res) => {
      const transaction = {
          sender_id: req.body.sender_id,
          receiver_id: req.body.receiver_id,
          token_id: req.body.token_id,
          amount: req.body.amount,
          timestamp: new Date()
      };
  
      await pool.query(
          'INSERT INTO transactions (sender_id, receiver_id, token_id, amount, timestamp) VALUES ($1, $2, $3, $4, $5)',
          [transaction.sender_id, transaction.receiver_id, transaction.token_id, transaction.amount, transaction.timestamp]
      );
  
      res.send('Transaction ajoutée avec succès!');
  });
  
  app.listen(PORT, () => {
      console.log(`Serveur démarré sur http://localhost:${PORT}`);
  });